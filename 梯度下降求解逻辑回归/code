import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

1.
#读入数据

import os
path = 'data'+ os.sep +'LogiReg_data.txt'
df = pd.read_csv(path, header = None, names = ['Exam 1', 'Exam 2', 'Admitted'])
df.head()              #表头           列名

#利用散点图看看录取和非录取数据的分布

positive = df[df['Admitted'] == 1]
negative = df[df['Admitted'] == 0]

fig, ax = plt.subplots(figsize = (10, 6))
ax.scatter(positive['Exam 1'], positive['Exam 2'], c = 'r', marker = 'o', label = 'Admitted')
ax.scatter(negative['Exam 1'], negative['Exam 2'], c = 'b', marker = 'x', label = 'Not')

ax.set_xlabel('Exam 1 Score')
ax.set_ylabel('Exam 2 Score')

ax.legend()
plt.show()

2.
#sigmoid函数

def sigmoid(z):
    return 1/(1+ np.exp(-z))

#sigmoid函数的具体情况

nums = np.arange(-10, 10, step=1) #creates a vector containing 20 equally spaced values from -10 to 10
fig, ax = plt.subplots(figsize=(12,4))
ax.plot(nums, sigmoid(nums), 'r')

3.
#预测模型

def model(X, theta):
    return sigmoid(np.dot(X, theta.T))

4.
#数据处理，datafram转换成矩阵并且将其分为features label

df.insert(0, 'Ones', 1)
#在     第一列 插入 名为Ones 的全为1的数据

orig_data = df.as_matrix()
cols = orig_data.shape[1]
#列的数量

X = orig_data[ : , : cols  - 1]
y = orig_data[ : , cols - 1 : ]

theta = np.zeros([1,3])
#虽然没有值，但是可以用0占位

5.
#建立损失函数

def cost(X, y, theta):
    left = np.multiply(-y, np.log(model(X, theta)))
    right = np.multiply(1 - y, np.log(1 - model(X, theta)))
    return np.sum(left - right)/len(X)
                                #样本数量
6.
#计算梯度（每个theta必需同时更新）

def gradient(X, y, theta):
    grad = np.zeros(theta.shape)
    #用0来占位

    error = (model(X, theta)- y).ravel()
    #取得误差值

    for j in range(len(theta.ravel())):
        #每一个参数都要处理

        term = np.multiply(error, X[:,j])
                                  #第j个特征
        grad[0, j] = np.sum(term) / len(X)

    return grad

7.
#比较3中不同的梯度下降方法

STOP_ITER = 0
STOP_COST = 1
STOP_GRAD = 2

def stopCriterion(type, value, threshold):
    #设定三种不同的停止策略
    if type == STOP_ITER:
        #迭代次数
        return value > threshold
    elif type == STOP_COST:
        #损失值
        return abs(value[-1]-value[-2]) < threshold
    elif type == STOP_GRAD:
        #梯度
        return np.linalg.norm(value) < threshold

8.
#对数据进行洗牌（np里面有该功能）

import numpy.random
def shuffleData(data):
    np.random.shuffle(data)
    cols = data.shape[1]
    X = data[:, 0:cols-1]
    y = data[:, cols-1:]
    return X, y

9.
#计算系数theta，迭代次数， 损失，梯度， 运行时间

import time

def descent(data, theta, batchSize, stopType, thresh, alpha):
    #梯度下降求解

    init_time = time.time()
    i = 0 # 迭代次数
    k = 0 # batch
    X, y = shuffleData(data)
    grad = np.zeros(theta.shape) # 计算的梯度
    costs = [cost(X, y, theta)] # 损失值


    while True:
        grad = gradient(X[k:k+batchSize], y[k:k+batchSize], theta)
        k += batchSize #取batch数量个数据
        if k >= n:
            k = 0
            X, y = shuffleData(data) #重新洗牌
        theta = theta - alpha*grad # 参数更新
        costs.append(cost(X, y, theta)) # 计算新的损失
        i += 1

        if stopType == STOP_ITER:       value = i
        elif stopType == STOP_COST:     value = costs
        elif stopType == STOP_GRAD:     value = grad
        if stopCriterion(stopType, value, thresh): break

    return theta, i-1, costs, grad, time.time() - init_time

10.
#显示的迭代次数与损失的关系

def runExpe(data, theta, batchSize, stopType, thresh, alpha):
    #import pdb; pdb.set_trace();
    theta, iter, costs, grad, dur = descent(data, theta, batchSize, stopType, thresh, alpha)
    name = "Original" if (data[:,1]>2).sum() > 1 else "Scaled"
    name += " data - learning rate: {} - ".format(alpha)

    if batchSize==n:
        strDescType = "Gradient"
    elif batchSize==1:
        strDescType = "Stochastic"
    else:
        strDescType = "Mini-batch ({})".format(batchSize)
    name += strDescType + " descent - Stop: "

    if stopType == STOP_ITER:
        strStop = "{} iterations".format(thresh)
    elif stopType == STOP_COST:
        strStop = "costs change < {}".format(thresh)
    else:
        strStop = "gradient norm < {}".format(thresh)
    name += strStop

    print ("***{}\nTheta: {} - Iter: {} - Last cost: {:03.2f} - Duration: {:03.2f}s".format(
        name, theta, iter, costs[-1], dur))

    fig, ax = plt.subplots(figsize=(12,4))

    ax.plot(np.arange(len(costs)), costs, 'r')
    ax.set_xlabel('Iterations')
    ax.set_ylabel('Cost')
    ax.set_title(name.upper() + ' - Error vs. Iteration')

    return theta


11.
#不同的停止策略

#选择的梯度下降方法是基于所有样本的
n=100

#迭代次数
runExpe(orig_data, theta, n, STOP_ITER, thresh=5000, alpha=0.000001)
#损失
runExpe(orig_data, theta, n, STOP_COST, thresh=0.000001, alpha=0.001)
#梯度
runExpe(orig_data, theta, n, STOP_GRAD, thresh=0.05, alpha=0.001)

12.
#不同的梯度下降方法

#随机梯度下降
runExpe(orig_data, theta, 1, STOP_ITER, thresh=5000, alpha=0.001)
#小批量梯度下降
runExpe(orig_data, theta, 16, STOP_ITER, thresh=15000, alpha=0.001)

13.
#将数据标准化

from sklearn import preprocessing as pp

scaled_data = orig_data.copy()
scaled_data[:, 1:3] = pp.scale(orig_data[:, 1:3])
                                          #只包括列号为1，2的两列

runExpe(scaled_data, theta, n, STOP_ITER, thresh=5000, alpha=0.001)

14.
#mini-batch最好用

runExpe(scaled_data, theta, 16, STOP_GRAD, thresh=0.002*2, alpha=0.001)

15.
#计算精度

#设定阈值
def predict(X, theta):
    return [1 if x >= 0.5 else 0 for x in model(X, theta)]

scaled_X = scaled_data[:, :3]
y = scaled_data[:, 3]
predictions = predict(scaled_X, theta)
correct = [1 if ((a == 1 and b == 1) or (a == 0 and b == 0)) else 0 for (a, b) in zip(predictions, y)]
accuracy = (sum(map(int, correct)) % len(correct))
print ('accuracy = {0}%'.format(accuracy))
